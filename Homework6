USE ALee_2019

GO
/*drop tables*/
DROP TABLE IF EXISTS RoomStay;
DROP TABLE IF EXISTS Rooms;
DROP TABLE IF EXISTS GuestLevel;
DROP TABLE IF EXISTS GuestClass;
DROP TABLE IF EXISTS Counts;
DROP TABLE IF EXISTS Sales;
DROP TABLE IF EXISTS Guest;
DROP TABLE IF EXISTS GuestStatus;
DROP TABLE IF EXISTS Service;
DROP TABLE IF EXISTS ServiceStatus;
DROP TABLE IF EXISTS SuppliesReceived;
DROP TABLE IF EXISTS Supplies;
DROP TABLE IF EXISTS Tavern;
DROP TABLE IF EXISTS Users;
DROP TABLE IF EXISTS Location;
DROP TABLE IF EXISTS Roles;


CREATE TABLE Roles(
	ID INT identity Primary Key,
	Name VARCHAR(250),
	Description VARCHAR(MAX)

);
CREATE TABLE Location(
	ID INT identity Primary Key,
	Name VARCHAR(250)
);
CREATE TABLE Users(
	ID INT identity Primary Key,
	Name VARCHAR(250),
	RoleID INT FOREIGN KEY REFERENCES Roles(ID)
);

/* Created tables */
CREATE TABLE Tavern(
	ID INT identity Primary Key,
	Name VARCHAR(250),
	LocationID INT FOREIGN KEY REFERENCES Location(ID),
	OwnerID INT FOREIGN KEY REFERENCES Users(ID)
);

CREATE TABLE Supplies(
	ID INT identity Primary Key,
	Name VARCHAR(250),
	Unit VARCHAR(50),
);
CREATE TABLE SuppliesReceived(
	ID INT identity Primary Key,
	Date DATETIME,
	QTY DECIMAL,
	COST DECIMAL,
	SupplyID INT,
	TavernID INT FOREIGN KEY REFERENCES Tavern(ID)
);
CREATE TABLE ServiceStatus(
	ID INT identity Primary Key,
	Name VARCHAR(250)
);

CREATE TABLE Service(
	ID INT identity Primary Key,
	Name VARCHAR(250),
	StatusID INT FOREIGN KEY REFERENCES ServiceStatus(ID),
	TavernID INT FOREIGN KEY REFERENCES Tavern(ID)
);

CREATE TABLE GuestStatus(
	ID INT identity Primary Key,
	Name VARCHAR(100)
);

CREATE TABLE Guest(
	ID INT identity Primary Key,
	Name VARCHAR(250),
	Notes VARCHAR(250),
	Birthdate Date,
	CakeDays date,
	GuestStatusID INT FOREIGN KEY REFERENCES GuestStatus(ID)
);
CREATE TABLE Sales(
	ID INT identity Primary Key,
	ServiceID INT FOREIGN KEY REFERENCES Service(ID),
	GuestID INT FOREIGN KEY REFERENCES Guest(ID),
	Price DECIMAL,
	PurchaseDate DATE,
	Amount DECIMAL,
	TavernID INT FOREIGN KEY REFERENCES Tavern(ID)
);
CREATE TABLE Counts(
	SupplyID INT identity Primary Key,
	Date Date,
	TavernID INT FOREIGN KEY REFERENCES Tavern(ID),
	Count DECIMAL
);
CREATE TABLE GuestClass(
	ID INT identity Primary Key,
	Name VARCHAR(250)
);


CREATE TABLE GuestLevel(
	ID INT identity Primary Key,
	GuestID INT FOREIGN KEY REFERENCES Guest(ID),
	ClassID INT FOREIGN KEY REFERENCES GuestClass(ID),
	Date date
);

/* creates rooms*/
CREATE TABLE Rooms(
	ID INT IDENTITY Primary Key,
	Status VARCHAR(250),
	TavernID INT FOREIGN KEY REFERENCES Tavern(ID)
);

/*Creates rooms stayed in */
CREATE TABLE RoomStay(
	ID INT IDENTITY Primary Key,
	SaleID INT,
	GuestID INT FOREIGN KEY REFERENCES Guest(ID),
	RoomID INT FOREIGN KEY REFERENCES Rooms(ID),
	Date Date,
	Rate DECIMAL
);

INSERT INTO Roles
VALUES
('Manager', 'manages the place'),
('greeter', 'greets guest'),
('maid',' cleans the joint'),
('cook', 'cooks food'),
('idiot', 'let people make fun of him');
/*adding data to location*/
INSERT INTO Location
VALUES
('Philly'),
('Springfield'),
('Mt Laurel'),
('Chester'),
('Not Philly
');
/* adding data to the user */

INSERT INTO Users
VALUES
('Joanna', '1'),
('Peter', '2'),
('Steven','3'),
('Rob', '4'),
('Carrie', '5');
INSERT INTO Tavern 
VALUES
('Howl By the Moon','1', '1'),
('Moes Tavern', '2', '2'),
('Miller Ale House', '3','3'),
('Maggies Pub', '4','4'),
('Xfinity', '5','5');

/* adding data to the supplies */
INSERT INTO Supplies
VALUES
('Miller Lite','ounces'),
('Toilet Paper','roll'),
('Mugs','pounds'),
('Water','gallons'),
('Apple Cider Vinegar','jugs');

/* adding data to the supplies being received */

INSERT INTO SuppliesReceived
VALUES
(01/01/2011, 100, 1000,1,2),
(02/02/2012, 50, 500,5,3),
(03/03/2013, 99, 12,2,5),
(04/04/2014, 23, 3,3,2),
(05/05/2015, 4, 66,1,3);

/* adding data to the statuses of the service */
INSERT INTO ServiceStatus
VALUES
('Active'),
('Inactive'),
('Out of Stock'),
('Discontinued');

/* adding data to the services */
INSERT INTO Service
VALUES
('Room Service' , 1,5),
('Chiropractor' , 2,4),
('Television' , 1,3),
('Grub Hub' , 2,2),
('Room Service' , 1,2);

INSERT INTO GuestStatus
VALUES
('Sick'),
('0HP'),
('Alive'),
('Hungry'),
('Excited');

INSERT INTO Guest
VALUES
('Eric','manager','2/12/2012','5/23/1990',2),
('Bruce','CEO','3/31/1990','5/23/2011',3),
('Clark','reporter','5/30/2012','3/03/1930',1),
('Barry','scientist','1/11/2011','2/26/2000',5),
('Dianna','amazon','12/12/2012','10/10/2010',2);

/* adding data to the sales */

INSERT INTO Sales
VALUES
(3,3,199.99,'01/12/2020',199.99,4),
(2,2,67.45,'12/11/2000',199.99,5),
(3,5,150.00,'05/11/1999',150.0,1),
(5,2,1099.00,'01/12/2020',35.0,2),
(1,1,245.02,'01/12/2020',245.02,3);


INSERT INTO Counts
VALUES
('11/11/2011',5,10.1),
('12/12/2012',5,10.1),
('03/23/1993',5,10.1),
('04/05/1996',5,10.1),
('08/14/2019',5,10.1);


INSERT INTO GuestClass
VALUES
('Warrior'),
('Mage'),
('Archer'),
('Thief'),
('Pirate');

INSERT INTO Rooms
VALUES
('Vacant',1),
('Occupied',2),
('Out of Order', 3),
('No longer avaiable',4),
('redesigning',5);

INSERT INTO RoomStay
VALUES
(1,4,5,'03/10/2019',10.00),
(2,1,5,'12/10/2012',1.00),
(3,3,5,'08/10/2015',23.50),
(4,2,5,'04/10/2017',154.00),
(5,2,5,'01/10/2020',999.00);

--1. Write a stored procedure that takes a class name and returns all guests that have any levels of that class
Drop Proc if exists getGuestLevel;
go
CREATE PROCEDURE getGuestLevel 
@className varchar(30)
AS
SELECT Guest.Name FROM Guest
JOIN GuestLevel on Guest.ID = GuestLevel.ID
JOIN GuestClass on guestclass.ID = GuestClass.ID
WHERE GuestClass.Name = @className
GO;

--2. Write a stored procedure that takes a guest id and returns the total that guest spent on services
Drop proc if exists totalSpent;
go
CREATE PROCEDURE totalSpent 
@guestID int
AS BEGIN
SELECT SUM(Amount) FROM Sales WHERE GuestID = @guestID;
END;

--3. Write a stored procedure that takes a level and an optional argument that determines whether the procedure returns guests of that level and higher or that level and lower
drop proc if exists highOrlow
go
CREATE PROCEDURE highOrlow
@Level int, @higherOrLower BIT = 0
ASBEGIN
SELECT Guest.Name,GuestClass.Name,GuestLevel.ID 
FROM Guest Join Guestlevel ON Guest.ID = GuestLevel.GuestID
Join GuestClass ON GuestLevel.ID = GuestClass.ID
WHERE (@higherOrLower = 0 AND GuestLevel.ID <=@Level) OR(@higherOrLower = 0 AND GuestLevel.ID <=@Level);
END;


--4. Write a stored procedure that deletes a Tavern ( don’t run it yet or rollback your transaction if you do )
Drop proc if exists deleteTavern;
go
CREATE PROCEDURE deleteTavern
@tavernId INT
AS
DELETE FROM Tavern WHERE ID = @tavernId;
go

--5. Write a trigger that watches for deleted taverns and use it to remove taverns, 
--supplies, rooms, and services tied to it
Drop trigger if exists deleteTheRest;
go
CREATE TRIGGER deleteTheRest
ON dbo.tavern
AFTER DELETE
AS BEGIN
	DELETE FROM Tavern Where Id = @tavernId; --not sure if this is needed since the procedure will delete the tavern 
	DELETE FROM SuppliesReceived Where TavernID = @tavernId;
	DELETE FROM Rooms Where TavernID = @tavernId;
	DELETE FROM Service Where TavernID = @tavernId;
END

--6. Write a stored procedure that uses the function from the last assignment that 
--returns open rooms with their prices, and automatically book the lowest price room with a guest for one day
--am i doing this right???? I think Im confused 
Drop proc if exists openRooms;
go
CREATE PROCEDURE openRooms

IF OBJECT_ID (N'dbo.OpenRooms', N'FN') IS NOT NULL   
DROP FUNCTION OpenRooms; 
GO
CREATE FUNCTION dbo.OpenRooms(@RoomOpen Date) 
RETURNS TABLE AS BEGIN
RETURN(
SELECT Rooms.ID, Tavern.Name FROM RoomStay 
Inner Join Rooms ON RoomStay.RoomID = Rooms.ID
Inner Join Tavern ON Rooms.TavernID = Tavern.ID
WHERE RoomStay.Date != @RoomOpen
)
END;

--7. Write a trigger that watches for new bookings and adds a new sale for the guest for a service 
--(for free if you can in your schema)

Drop Trigger if exists addSale;
go
CREATE TRIGGER addSale 
ON dbo.Sales
AFTER INSERT
AS BEGIN
INSERT INTO RoomStay(6,7,2,'03/20/2019', 0.00);
END
